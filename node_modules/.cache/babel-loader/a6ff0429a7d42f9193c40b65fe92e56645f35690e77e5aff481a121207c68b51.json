{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jftal\\\\WebstormProjects\\\\Fronted_Klending_bieb1\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from \"axios\";\nimport jwtDecode from \"jwt-decode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext({});\nexport function AuthContextProvider(_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  const navigate = useNavigate();\n  useEffect(() => {\n    //check of er een token is in localstorage\n    if (localStorage.getItem(\"token\")) {\n      //get en decode token\n      const decoded = jwtDecode(localStorage.getItem(\"token\"));\n      //get token\n      const token = localStorage.getItem(\"token\");\n      //fetch data met decoded en normale token\n      void fetchUserData(decoded, token);\n      // console.log(\"er is een token\", token)\n    } else {\n      //als er geen token is update dan de isAuth\n      setIsAuth({\n        isAuth: false,\n        user: \"\",\n        status: \"done\"\n      });\n      // console.log(\"er is geen token\")\n    }\n  }, []);\n  const [auth, setAuth] = useState({\n    isAuth: false,\n    user: null,\n    status: \"pending\"\n  });\n  function login(token) {\n    localStorage.setItem('token', token);\n    const decodedToken = jwtDecode(token);\n    console.log(decodedToken);\n    void fetchUserData(token, decodedToken.sub, \"/account\");\n  }\n  async function fetchUserData(token, sub, redirect) {\n    try {\n      const response = await axios.get(`http://localhost:8083/users/${sub}`, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log(response.data);\n      setAuth({\n        ...auth,\n        isAuth: true,\n        user: {\n          username: response.data.username,\n          authority: response.data.authorities[0].authority\n        },\n        status: \"done\"\n      });\n      // refreshes other than account page, the page will refresh it\n      if (redirect) {\n        navigate(redirect);\n      }\n    } catch (e) {\n      console.error(e);\n      setAuth({\n        ...auth,\n        status: \"done\"\n      });\n    }\n  }\n  function logout() {\n    setAuth({\n      isAuth: false,\n      user: null,\n      status: \"pending\"\n    });\n    localStorage.removeItem(\"token\");\n    console.log(\"Gebruiker is uitgelogd!\");\n    navigate('/');\n  }\n  const data = {\n    login: login,\n    logout: logout,\n    isAuth: auth.isAuth,\n    user: auth.user,\n    status: auth.status\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: data,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 9\n  }, this);\n}\n_s(AuthContextProvider, \"hkQ6UoKp/2mGbnh9xUqmMVR0Udw=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthContextProvider;\nexport default AuthContextProvider;\n\n// import {createContext, useEffect, useState} from 'react';\n// import {useNavigate} from 'react-router-dom';\n//\n// import axios from \"axios\";\n// import jwtDecode from \"jwt-decode\";\n//\n//\n//\n//\n//\n// export const AuthContext = createContext({}) ;\n//\n// function AuthContextProvider({children}) {\n//\n//\n//     const [auth, setAuth] = useState({\n//         isAuth: false,\n//         user: null,\n//         status: \"pending\",\n//     });\n//     const navigate = useNavigate();\n//\n//\n//     useEffect(() => {\n//         //check of er een token is in localstorage\n//         if(localStorage.getItem(\"token\")){\n//             //get en decode token\n//             const decodedToken = jwtDecode(localStorage.getItem(\"token\"))\n//             //get token\n//             const token = localStorage.getItem(\"token\")\n//             //fetch data met decoded en normale token\n//             void fetchUserData(decodedToken, token)\n//             // console.log(\"er is een token\", token)\n//         }else{\n//             //als er geen token is update dan de isAuth\n//             setAuth({isAuth: false,\n//                 user:\"\",\n//                 status: \"done\",\n//             })\n//             // console.log(\"er is geen token\")\n//         }\n//     }, []);\n//\n//     // useEffect(() => {\n//     //         const storedToken = localStorage.getItem(\"token\");\n//     //         if (storedToken) {\n//     //             // when token then fetchUserData\n//     //             const decodedToken = jwtDecode(storedToken)\n//     //             if (Math.floor(Date.now() / 1000) < decodedToken.exp) {\n//     //                 void fetchUserData(storedToken, decodedToken.sub);\n//     //             }\n//     //         } else {\n//     //             // when no token set status done and render app\n//     //             setAuth({\n//     //                 ...auth,\n//     //                 isAuth: false,\n//     //                 user: null,\n//     //                 status: 'done',\n//     //             });\n//     //         }\n//     //     }, []\n//     // );\n//\n//\n//     function login(token) {\n//\n//\n//         localStorage.setItem('token', token);\n//         const decodedToken = jwtDecode(token);\n//         console.log(decodedToken)\n//         void fetchUserData(token, decodedToken.sub, \"/account\");\n//\n//     }\n//\n//     async function fetchUserData(token, sub, redirect) {\n//         try {\n//\n//             const response = await axios.get(`http://localhost:8083/users/${sub}`, {\n//                 headers: {\n//                     \"Content-Type\": \"application/json\",\n//                     Authorization: `Bearer ${token}`,\n//                 }\n//             })\n//\n//             console.log(response.data)\n//             setAuth({\n//                 ...auth,\n//                 isAuth: true,\n//                 user: {\n//                     username: response.data.username,\n//                     authority: response.data.authorities[0].authority\n//                 },\n//                 status: \"pending\"\n//             });\n//             // refreshes other than account page, the page will refresh it\n//             if (redirect) {\n//                 navigate(redirect);\n//             }\n//         } catch (e) {\n//             console.error(e);\n//             setAuth({\n//                 ...auth,\n//                 status: \"done\",\n//             })\n//         }\n//     }\n//\n//     function logout() {\n//         setAuth( {isAuth: false, user: null,\n//             status: \"done\",});\n//         localStorage.removeItem(\"token\");\n//         console.log(\"Gebruiker is uitgelogd!\");\n//         navigate ('/');\n//     }\n//\n//     const data = {\n//         login: login,\n//         logout: logout,\n//         isAuth: auth.isAuth,\n//         user: auth.user,\n//         status: auth.status,\n//     }\n//\n//     return (\n//         <AuthContext.Provider value={data}>\n//             {children}\n//         </AuthContext.Provider>\n//     );\n// }\n// export default AuthContextProvider;\n//\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["createContext","useState","useNavigate","axios","jwtDecode","jsxDEV","_jsxDEV","AuthContext","AuthContextProvider","_ref","_s","children","navigate","useEffect","localStorage","getItem","decoded","token","fetchUserData","setIsAuth","isAuth","user","status","auth","setAuth","login","setItem","decodedToken","console","log","sub","redirect","response","get","headers","Authorization","data","username","authority","authorities","e","error","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/jftal/WebstormProjects/Fronted_Klending_bieb1/src/context/AuthContext.js"],"sourcesContent":["\r\nimport {createContext, useState} from 'react';\r\nimport {useNavigate} from 'react-router-dom';\r\n\r\nimport axios from \"axios\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\n\r\nexport const AuthContext = createContext({}) ;\r\n\r\nexport function AuthContextProvider({children}) {\r\n\r\n    const navigate = useNavigate()\r\n    useEffect(() => {\r\n        //check of er een token is in localstorage\r\n        if(localStorage.getItem(\"token\")){\r\n            //get en decode token\r\n            const decoded = jwtDecode(localStorage.getItem(\"token\"))\r\n            //get token\r\n            const token = localStorage.getItem(\"token\")\r\n            //fetch data met decoded en normale token\r\n            void fetchUserData(decoded, token)\r\n            // console.log(\"er is een token\", token)\r\n        }else{\r\n            //als er geen token is update dan de isAuth\r\n            setIsAuth({isAuth: false,\r\n                user:\"\",\r\n                status: \"done\",\r\n            })\r\n            // console.log(\"er is geen token\")\r\n        }\r\n    }, []);\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const [auth, setAuth] = useState({\r\n        isAuth: false,\r\n        user: null,\r\n        status: \"pending\",\r\n    });\r\n    \r\n\r\n\r\n\r\n\r\n    function login(token) {\r\n        localStorage.setItem('token', token);\r\n        const decodedToken = jwtDecode(token);\r\n        console.log(decodedToken)\r\n        void fetchUserData(token, decodedToken.sub, \"/account\");\r\n    }\r\n\r\n\r\n    async function fetchUserData(token, sub, redirect) {\r\n        try {\r\n\r\n            const response = await axios.get(`http://localhost:8083/users/${sub}`, {\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    Authorization: `Bearer ${token}`,\r\n                }\r\n            })\r\n\r\n            console.log(response.data)\r\n            setAuth({\r\n                ...auth,\r\n                isAuth: true,\r\n                user: {\r\n                    username: response.data.username,\r\n                    authority: response.data.authorities[0].authority\r\n                },\r\n                status: \"done\"\r\n            });\r\n            // refreshes other than account page, the page will refresh it\r\n            if (redirect) {\r\n                navigate(redirect);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n            setAuth({\r\n                ...auth,\r\n                status: \"done\",\r\n            })\r\n        }\r\n    }\r\n\r\n    function logout() {\r\n        setAuth( {isAuth: false, user: null,\r\n            status: \"pending\",});\r\n        localStorage.removeItem(\"token\");\r\n        console.log(\"Gebruiker is uitgelogd!\");\r\n        navigate ('/');\r\n    }\r\n\r\n    const data = {\r\n        login: login,\r\n        logout: logout,\r\n        isAuth: auth.isAuth,\r\n        user: auth.user,\r\n        status: auth.status,\r\n    }\r\n\r\n    return (\r\n        <AuthContext.Provider value={data}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n}\r\nexport default AuthContextProvider;\r\n\r\n\r\n\r\n\r\n\r\n// import {createContext, useEffect, useState} from 'react';\r\n// import {useNavigate} from 'react-router-dom';\r\n//\r\n// import axios from \"axios\";\r\n// import jwtDecode from \"jwt-decode\";\r\n//\r\n//\r\n//\r\n//\r\n//\r\n// export const AuthContext = createContext({}) ;\r\n//\r\n// function AuthContextProvider({children}) {\r\n//\r\n//\r\n//     const [auth, setAuth] = useState({\r\n//         isAuth: false,\r\n//         user: null,\r\n//         status: \"pending\",\r\n//     });\r\n//     const navigate = useNavigate();\r\n//\r\n//\r\n//     useEffect(() => {\r\n//         //check of er een token is in localstorage\r\n//         if(localStorage.getItem(\"token\")){\r\n//             //get en decode token\r\n//             const decodedToken = jwtDecode(localStorage.getItem(\"token\"))\r\n//             //get token\r\n//             const token = localStorage.getItem(\"token\")\r\n//             //fetch data met decoded en normale token\r\n//             void fetchUserData(decodedToken, token)\r\n//             // console.log(\"er is een token\", token)\r\n//         }else{\r\n//             //als er geen token is update dan de isAuth\r\n//             setAuth({isAuth: false,\r\n//                 user:\"\",\r\n//                 status: \"done\",\r\n//             })\r\n//             // console.log(\"er is geen token\")\r\n//         }\r\n//     }, []);\r\n//\r\n//     // useEffect(() => {\r\n//     //         const storedToken = localStorage.getItem(\"token\");\r\n//     //         if (storedToken) {\r\n//     //             // when token then fetchUserData\r\n//     //             const decodedToken = jwtDecode(storedToken)\r\n//     //             if (Math.floor(Date.now() / 1000) < decodedToken.exp) {\r\n//     //                 void fetchUserData(storedToken, decodedToken.sub);\r\n//     //             }\r\n//     //         } else {\r\n//     //             // when no token set status done and render app\r\n//     //             setAuth({\r\n//     //                 ...auth,\r\n//     //                 isAuth: false,\r\n//     //                 user: null,\r\n//     //                 status: 'done',\r\n//     //             });\r\n//     //         }\r\n//     //     }, []\r\n//     // );\r\n//\r\n//\r\n//     function login(token) {\r\n//\r\n//\r\n//         localStorage.setItem('token', token);\r\n//         const decodedToken = jwtDecode(token);\r\n//         console.log(decodedToken)\r\n//         void fetchUserData(token, decodedToken.sub, \"/account\");\r\n//\r\n//     }\r\n//\r\n//     async function fetchUserData(token, sub, redirect) {\r\n//         try {\r\n//\r\n//             const response = await axios.get(`http://localhost:8083/users/${sub}`, {\r\n//                 headers: {\r\n//                     \"Content-Type\": \"application/json\",\r\n//                     Authorization: `Bearer ${token}`,\r\n//                 }\r\n//             })\r\n//\r\n//             console.log(response.data)\r\n//             setAuth({\r\n//                 ...auth,\r\n//                 isAuth: true,\r\n//                 user: {\r\n//                     username: response.data.username,\r\n//                     authority: response.data.authorities[0].authority\r\n//                 },\r\n//                 status: \"pending\"\r\n//             });\r\n//             // refreshes other than account page, the page will refresh it\r\n//             if (redirect) {\r\n//                 navigate(redirect);\r\n//             }\r\n//         } catch (e) {\r\n//             console.error(e);\r\n//             setAuth({\r\n//                 ...auth,\r\n//                 status: \"done\",\r\n//             })\r\n//         }\r\n//     }\r\n//\r\n//     function logout() {\r\n//         setAuth( {isAuth: false, user: null,\r\n//             status: \"done\",});\r\n//         localStorage.removeItem(\"token\");\r\n//         console.log(\"Gebruiker is uitgelogd!\");\r\n//         navigate ('/');\r\n//     }\r\n//\r\n//     const data = {\r\n//         login: login,\r\n//         logout: logout,\r\n//         isAuth: auth.isAuth,\r\n//         user: auth.user,\r\n//         status: auth.status,\r\n//     }\r\n//\r\n//     return (\r\n//         <AuthContext.Provider value={data}>\r\n//             {children}\r\n//         </AuthContext.Provider>\r\n//     );\r\n// }\r\n// export default AuthContextProvider;\r\n//\r\n"],"mappings":"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QAEdN,WAAW;AAAA;AAAAgD,EAAA,GAFhB1C,mBAAmB;AAqGnC,eAAeA,mBAAmB;;AAMlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}