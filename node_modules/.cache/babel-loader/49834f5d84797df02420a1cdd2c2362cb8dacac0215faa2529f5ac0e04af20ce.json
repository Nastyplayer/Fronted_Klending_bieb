{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jftal\\\\WebstormProjects\\\\Fronted_Klending_bieb1\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\n//\n// import {createContext, useState} from 'react';\n// import {useNavigate} from 'react-router-dom';\n//\n// import axios from \"axios\";\n// import jwtDecode from \"jwt-decode\";\n//\n//\n// export const AuthContext = createContext({}) ;\n//\n// function AuthContextProvider({children}) {\n//\n//\n//     const [auth, setAuth] = useState({\n//         isAuth: false,\n//         user: null,\n//         status: \"pending\",\n//     });\n//     const navigate = useNavigate();\n//\n//\n//\n//\n//     function login(token) {\n//         localStorage.setItem('token', token);\n//         const decodedToken = jwtDecode(token);\n//         console.log(decodedToken)\n//         void fetchUserData(token, decodedToken.sub, \"/account\");\n//     }\n//\n//\n//     async function fetchUserData(token, sub, redirect) {\n//         try {\n//\n//             const response = await axios.get(`http://localhost:8083/users/${sub}`, {\n//                 headers: {\n//                     \"Content-Type\": \"application/json\",\n//                     Authorization: `Bearer ${token}`,\n//                 }\n//             })\n//\n//             console.log(response.data)\n//             setAuth({\n//                 ...auth,\n//                 isAuth: true,\n//                 user: {\n//                     username: response.data.username,\n//                     authority: response.data.authorities[0].authority\n//                 },\n//                 status: \"done\"\n//             });\n//             // refreshes other than account page, the page will refresh it\n//             if (redirect) {\n//                 navigate(redirect);\n//             }\n//         } catch (e) {\n//             console.error(e);\n//             setAuth({\n//                 ...auth,\n//                 status: \"done\",\n//             })\n//         }\n//     }\n//\n//     function logout() {\n//         setAuth( {isAuth: false, user: null,\n//             status: \"pending\",});\n//         localStorage.removeItem(\"token\");\n//         console.log(\"Gebruiker is uitgelogd!\");\n//         navigate ('/');\n//     }\n//\n//     const data = {\n//         login: login,\n//         logout: logout,\n//         isAuth: auth.isAuth,\n//         user: auth.user,\n//         status: auth.status,\n//     }\n//\n//     return (\n//         <AuthContext.Provider value={data}>\n//             {children}\n//         </AuthContext.Provider>\n//     );\n// }\n// export default AuthContextProvider;\n//\n\nimport React, { createContext, useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport jwtDecode from \"jwt-decode\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext({});\nfunction AuthContextProvider(_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [auth, setAuth] = useState({\n    isAuth: false,\n    user: null,\n    status: \"pending\"\n  });\n  const navigate = useNavigate();\n  useEffect(() => {\n    const storedToken = localStorage.getItem(\"token\");\n    if (storedToken) {\n      const decodedToken = jwtDecode(storedToken);\n      if (Math.floor(Date.now() / 1000) < decodedToken.exp) {\n        void fetchUserData(storedToken, decodedToken.sub);\n      }\n    } else {\n      setAuth({\n        ...auth,\n        isAuth: false,\n        user: null,\n        status: 'done'\n      });\n    }\n  }, []);\n  function login(token) {\n    localStorage.setItem('token', token);\n    const decodedToken = jwtDecode(token);\n    void fetchUserData(token, decodedToken.sub, \"/account\");\n  }\n  async function fetchUserData(token, sub, redirect) {\n    try {\n      const response = await axios.get(`http://localhost:8083/users/${sub}`, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setAuth({\n        ...auth,\n        isAuth: true,\n        user: {\n          username: response.data.username,\n          authority: response.data.authorities[0].authority\n        },\n        status: \"done\"\n      });\n      if (redirect) {\n        navigate(redirect);\n      }\n    } catch (e) {\n      console.error(e);\n      setAuth({\n        ...auth,\n        status: \"done\"\n      });\n    }\n  }\n  function logout() {\n    localStorage.removeItem(\"token\");\n    navigate('/login');\n    setAuth({\n      ...auth,\n      isAuth: false,\n      user: null,\n      status: \"done\"\n    });\n  }\n  const data = {\n    isAuth: auth.isAuth,\n    user: auth.user,\n    status: auth.status,\n    login: login,\n    logout: logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: data,\n    children: auth.status === \"done\" ? children : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 50\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 9\n  }, this);\n}\n_s(AuthContextProvider, \"c0x1a7c2thvqdenw1A34uLtPV4o=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthContextProvider;\nexport default AuthContextProvider;\n\n//\n// import {createContext, useState} from 'react';\n// import {useNavigate} from 'react-router-dom';\n//\n// import axios from \"axios\";\n// import jwtDecode from \"jwt-decode\";\n//\n//\n// export const AuthContext = createContext({}) ;\n//\n// function AuthContextProvider({children}) {\n//\n//\n//     const [auth, setAuth] = useState({\n//         isAuth: false,\n//         user: null,\n//         status: \"pending\",\n//     });\n//     const navigate = useNavigate();\n//\n//\n//\n//\n//     function login(token) {\n//         localStorage.setItem('token', token);\n//         const decodedToken = jwtDecode(token);\n//         console.log(decodedToken)\n//         void fetchUserData(token, decodedToken.sub, \"/account\");\n//     }\n//\n//\n//     async function fetchUserData(token, sub, redirect) {\n//         try {\n//\n//             const response = await axios.get(`http://localhost:8083/users/${sub}`, {\n//                 headers: {\n//                     \"Content-Type\": \"application/json\",\n//                     Authorization: `Bearer ${token}`,\n//                 }\n//             })\n//\n//             console.log(response.data)\n//             setAuth({\n//                 ...auth,\n//                 isAuth: true,\n//                 user: {\n//                     username: response.data.username,\n//                     authority: response.data.authorities[0].authority\n//                 },\n//                 status: \"done\"\n//             });\n//             // refreshes other than account page, the page will refresh it\n//             if (redirect) {\n//                 navigate(redirect);\n//             }\n//         } catch (e) {\n//             console.error(e);\n//             setAuth({\n//                 ...auth,\n//                 status: \"done\",\n//             })\n//         }\n//     }\n//\n//     function logout() {\n//         setAuth( {isAuth: false, user: null,\n//             status: \"pending\",});\n//         localStorage.removeItem(\"token\");\n//         console.log(\"Gebruiker is uitgelogd!\");\n//         navigate ('/');\n//     }\n//\n//     const data = {\n//         login: login,\n//         logout: logout,\n//         isAuth: auth.isAuth,\n//         user: auth.user,\n//         status: auth.status,\n//     }\n//\n//     return (\n//         <AuthContext.Provider value={data}>\n//             {children}\n//         </AuthContext.Provider>\n//     );\n// }\n// export default AuthContextProvider;\n//\n//\n//\n//\n// // import {createContext, useEffect,  useState} from 'react';\n// // import {useNavigate} from 'react-router-dom';\n// //\n// // import axios from \"axios\";\n// // import jwtDecode from \"jwt-decode\";\n// //\n// //\n// // export const AuthContext = createContext({}) ;\n// //\n// // export function AuthContextProvider({children}) {\n// //\n// //     const navigate = useNavigate()\n// //\n// //     useEffect(() => {\n// //         //check of er een token is in localstorage\n// //         if(localStorage.getItem(\"token\")){\n// //             //get en decode token\n// //             const decoded = jwtDecode(localStorage.getItem(\"token\"))\n// //             //get token\n// //             const token = localStorage.getItem(\"token\")\n// //             //fetch data met decoded en normale token\n// //             void fetchUserData(decoded, token)\n// //             // console.log(\"er is een token\", token)\n// //         }else{\n// //             //als er geen token is update dan de isAuth\n// //             setIsAuth({isAuth: false,\n// //                 user:\"\",\n// //                 status: \"done\",\n// //             })\n// //             // console.log(\"er is geen token\")\n// //         }\n// //     }, []);\n// //\n// //\n// //\n// //     const [isAuth, setIsAuth] = useState({\n// //         isAuth: false, user: null,\n// //         status: \"pending\",\n// //     });\n// //\n// //\n// //\n// //\n// //\n// //     function login(token){\n// //         setIsAuth((isAuth) => ({\n// //             ...isAuth,\n// //             isAuth: true,\n// //             user: {...isAuth.user,token: token}\n// //         }));\n// //\n// //\n// //\n// //\n// //         localStorage.setItem('token', token);\n// //         const decodedToken = jwtDecode(token);\n// //         console.log(decodedToken)\n// //\n// //\n// //         void fetchUserData(token, decodedToken.sub, \"/account\");\n// //     }\n// //\n// //\n// //     async function fetchUserData(token, sub, redirect) {\n// //         try {\n// //\n// //             const response = await axios.get(`http://localhost:8083/users/${sub}`, {\n// //                 headers: {\n// //                     \"Content-Type\": \"application/json\",\n// //                     Authorization: `Bearer ${token}`,\n// //                 }\n// //             })\n// //\n// //             console.log(response.data)\n// //\n// //\n// //             setIsAuth({\n// //                 ...isAuth,\n// //                 isAuth: true,\n// //                 user: {\n// //                     username: response.data.username,\n// //                     // authority: response.data.authorities[0].authority\n// //                 },\n// //                 status: \"done\"\n// //             });\n// //\n// //\n// //             // refreshes other than account page, the page will refresh it\n// //             // if (redirect) {\n// //             //     navigate(redirect);\n// //             // }\n// //\n// //         } catch (e) {\n// //             console.error(e);\n// //             // setAuth({\n// //             //     ...auth,\n// //             //     status: \"done\",\n// //             // })\n// //         }\n// //     }\n// //\n// //     function logout() {\n// //         setIsAuth( {isAuth: false, user: \"\"});\n// //         localStorage.removeItem(\"token\");\n// //         console.log(\"Gebruiker is uitgelogd!\");\n// //         navigate ('/');\n// //         setIsAuth({\n// //             isAuth: false,\n// //             user: \"\",\n// //             status: \"done\",\n// //         })\n// //     }\n// //\n// //     const data = {\n// //\n// //         isAuth,\n// //\n// //         login: login,\n// //         logout: logout,\n// //         // isAuth: auth.isAuth,\n// //         // user: auth.user,\n// //         // status: auth.status,\n// //     }\n// //\n// //     return (\n// //         <AuthContext.Provider value={data}>\n// //             {children }\n// //         </AuthContext.Provider>\n// //     );\n// // }\n// // export default AuthContextProvider;\n// //\n// //\n// //\n// //\n//\n//\n//\n//\n//\n//\n//\n// // import {createContext, useEffect, useState} from 'react';\n// // import {useNavigate} from 'react-router-dom';\n// //\n// // import axios from \"axios\";\n// // import jwtDecode from \"jwt-decode\";\n// //\n// //\n// //\n// //\n// //\n// // export const AuthContext = createContext({}) ;\n// //\n// // function AuthContextProvider({children}) {\n// //\n// //\n// //     const [auth, setAuth] = useState({\n// //         isAuth: false,\n// //         user: null,\n// //         status: \"pending\",\n// //     });\n// //     const navigate = useNavigate();\n// //\n// //\n// //     useEffect(() => {\n// //         //check of er een token is in localstorage\n// //         if(localStorage.getItem(\"token\")){\n// //             //get en decode token\n// //             const decodedToken = jwtDecode(localStorage.getItem(\"token\"))\n// //             //get token\n// //             const token = localStorage.getItem(\"token\")\n// //             //fetch data met decoded en normale token\n// //             void fetchUserData(decodedToken, token)\n// //             // console.log(\"er is een token\", token)\n// //         }else{\n// //             //als er geen token is update dan de isAuth\n// //             setAuth({isAuth: false,\n// //                 user:\"\",\n// //                 status: \"done\",\n// //             })\n// //             // console.log(\"er is geen token\")\n// //         }\n// //     }, []);\n// //\n// //     // useEffect(() => {\n// //     //         const storedToken = localStorage.getItem(\"token\");\n// //     //         if (storedToken) {\n// //     //             // when token then fetchUserData\n// //     //             const decodedToken = jwtDecode(storedToken)\n// //     //             if (Math.floor(Date.now() / 1000) < decodedToken.exp) {\n// //     //                 void fetchUserData(storedToken, decodedToken.sub);\n// //     //             }\n// //     //         } else {\n// //     //             // when no token set status done and render app\n// //     //             setAuth({\n// //     //                 ...auth,\n// //     //                 isAuth: false,\n// //     //                 user: null,\n// //     //                 status: 'done',\n// //     //             });\n// //     //         }\n// //     //     }, []\n// //     // );\n// //\n// //\n// //     function login(token) {\n// //\n// //\n// //         localStorage.setItem('token', token);\n// //         const decodedToken = jwtDecode(token);\n// //         console.log(decodedToken)\n// //         void fetchUserData(token, decodedToken.sub, \"/account\");\n// //\n// //     }\n// //\n// //     async function fetchUserData(token, sub, redirect) {\n// //         try {\n// //\n// //             const response = await axios.get(`http://localhost:8083/users/${sub}`, {\n// //                 headers: {\n// //                     \"Content-Type\": \"application/json\",\n// //                     Authorization: `Bearer ${token}`,\n// //                 }\n// //             })\n// //\n// //             console.log(response.data)\n// //             setAuth({\n// //                 ...auth,\n// //                 isAuth: true,\n// //                 user: {\n// //                     username: response.data.username,\n// //                     authority: response.data.authorities[0].authority\n// //                 },\n// //                 status: \"pending\"\n// //             });\n// //             // refreshes other than account page, the page will refresh it\n// //             if (redirect) {\n// //                 navigate(redirect);\n// //             }\n// //         } catch (e) {\n// //             console.error(e);\n// //             setAuth({\n// //                 ...auth,\n// //                 status: \"done\",\n// //             })\n// //         }\n// //     }\n// //\n// //     function logout() {\n// //         setAuth( {isAuth: false, user: null,\n// //             status: \"done\",});\n// //         localStorage.removeItem(\"token\");\n// //         console.log(\"Gebruiker is uitgelogd!\");\n// //         navigate ('/');\n// //     }\n// //\n// //     const data = {\n// //         login: login,\n// //         logout: logout,\n// //         isAuth: auth.isAuth,\n// //         user: auth.user,\n// //         status: auth.status,\n// //     }\n// //\n// //     return (\n// //         <AuthContext.Provider value={data}>\n// //             {children}\n// //         </AuthContext.Provider>\n// //     );\n// // }\n// // export default AuthContextProvider;\n// //\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","createContext","useEffect","useState","useNavigate","jwtDecode","axios","jsxDEV","_jsxDEV","AuthContext","AuthContextProvider","_ref","_s","children","auth","setAuth","isAuth","user","status","navigate","storedToken","localStorage","getItem","decodedToken","Math","floor","Date","now","exp","fetchUserData","sub","login","token","setItem","redirect","response","get","headers","Authorization","username","data","authority","authorities","e","console","error","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/jftal/WebstormProjects/Fronted_Klending_bieb1/src/context/AuthContext.js"],"sourcesContent":["//\r\n// import {createContext, useState} from 'react';\r\n// import {useNavigate} from 'react-router-dom';\r\n//\r\n// import axios from \"axios\";\r\n// import jwtDecode from \"jwt-decode\";\r\n//\r\n//\r\n// export const AuthContext = createContext({}) ;\r\n//\r\n// function AuthContextProvider({children}) {\r\n//\r\n//\r\n//     const [auth, setAuth] = useState({\r\n//         isAuth: false,\r\n//         user: null,\r\n//         status: \"pending\",\r\n//     });\r\n//     const navigate = useNavigate();\r\n//\r\n//\r\n//\r\n//\r\n//     function login(token) {\r\n//         localStorage.setItem('token', token);\r\n//         const decodedToken = jwtDecode(token);\r\n//         console.log(decodedToken)\r\n//         void fetchUserData(token, decodedToken.sub, \"/account\");\r\n//     }\r\n//\r\n//\r\n//     async function fetchUserData(token, sub, redirect) {\r\n//         try {\r\n//\r\n//             const response = await axios.get(`http://localhost:8083/users/${sub}`, {\r\n//                 headers: {\r\n//                     \"Content-Type\": \"application/json\",\r\n//                     Authorization: `Bearer ${token}`,\r\n//                 }\r\n//             })\r\n//\r\n//             console.log(response.data)\r\n//             setAuth({\r\n//                 ...auth,\r\n//                 isAuth: true,\r\n//                 user: {\r\n//                     username: response.data.username,\r\n//                     authority: response.data.authorities[0].authority\r\n//                 },\r\n//                 status: \"done\"\r\n//             });\r\n//             // refreshes other than account page, the page will refresh it\r\n//             if (redirect) {\r\n//                 navigate(redirect);\r\n//             }\r\n//         } catch (e) {\r\n//             console.error(e);\r\n//             setAuth({\r\n//                 ...auth,\r\n//                 status: \"done\",\r\n//             })\r\n//         }\r\n//     }\r\n//\r\n//     function logout() {\r\n//         setAuth( {isAuth: false, user: null,\r\n//             status: \"pending\",});\r\n//         localStorage.removeItem(\"token\");\r\n//         console.log(\"Gebruiker is uitgelogd!\");\r\n//         navigate ('/');\r\n//     }\r\n//\r\n//     const data = {\r\n//         login: login,\r\n//         logout: logout,\r\n//         isAuth: auth.isAuth,\r\n//         user: auth.user,\r\n//         status: auth.status,\r\n//     }\r\n//\r\n//     return (\r\n//         <AuthContext.Provider value={data}>\r\n//             {children}\r\n//         </AuthContext.Provider>\r\n//     );\r\n// }\r\n// export default AuthContextProvider;\r\n//\r\n\r\n\r\n\r\nimport React, {createContext, useEffect, useState} from \"react\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport jwtDecode from \"jwt-decode\";\r\nimport axios from \"axios\";\r\n\r\nexport const AuthContext = createContext({});\r\n\r\nfunction AuthContextProvider({children}) {\r\n    const [auth, setAuth] = useState({\r\n        isAuth: false,\r\n        user: null,\r\n        status: \"pending\",\r\n    });\r\n    const navigate = useNavigate();\r\n\r\n\r\n    useEffect(() => {\r\n            const storedToken = localStorage.getItem(\"token\");\r\n            if (storedToken) {\r\n              \r\n                const decodedToken = jwtDecode(storedToken)\r\n                if (Math.floor(Date.now() / 1000) < decodedToken.exp) {\r\n                    void fetchUserData(storedToken, decodedToken.sub);\r\n                }\r\n            } else {\r\n\r\n                setAuth({\r\n                    ...auth,\r\n                    isAuth: false,\r\n                    user: null,\r\n                    status: 'done',\r\n                });\r\n            }\r\n        }, []\r\n    );\r\n\r\n\r\n    function login(token) {\r\n        localStorage.setItem('token', token);\r\n        const decodedToken = jwtDecode(token);\r\n        void fetchUserData(token, decodedToken.sub, \"/account\");\r\n    }\r\n\r\n\r\n    async function fetchUserData(token, sub, redirect) {\r\n        try {\r\n            const response = await axios.get(`http://localhost:8083/users/${sub}`, {\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    Authorization: `Bearer ${token}`,\r\n                }\r\n            })\r\n            setAuth({\r\n                ...auth,\r\n                isAuth: true,\r\n                user: {\r\n                    username: response.data.username,\r\n                    authority: response.data.authorities[0].authority\r\n                },\r\n                status: \"done\"\r\n            });\r\n\r\n            if (redirect) {\r\n                navigate(redirect);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n            setAuth({\r\n                ...auth,\r\n                status: \"done\",\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    function logout() {\r\n        localStorage.removeItem(\"token\");\r\n        navigate('/login');\r\n        setAuth({\r\n            ...auth,\r\n            isAuth: false,\r\n            user: null,\r\n            status: \"done\"\r\n        });\r\n    }\r\n\r\n\r\n    const data = {\r\n        isAuth: auth.isAuth,\r\n        user: auth.user,\r\n        status: auth.status,\r\n        login: login,\r\n        logout: logout\r\n    }\r\n\r\n\r\n    return (\r\n        <AuthContext.Provider value={data}>\r\n            {auth.status === \"done\" ? children : <p>Loading...</p>}\r\n        </AuthContext.Provider>\r\n    )\r\n}\r\n\r\n\r\nexport default AuthContextProvider;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//\r\n// import {createContext, useState} from 'react';\r\n// import {useNavigate} from 'react-router-dom';\r\n//\r\n// import axios from \"axios\";\r\n// import jwtDecode from \"jwt-decode\";\r\n//\r\n//\r\n// export const AuthContext = createContext({}) ;\r\n//\r\n// function AuthContextProvider({children}) {\r\n//\r\n//\r\n//     const [auth, setAuth] = useState({\r\n//         isAuth: false,\r\n//         user: null,\r\n//         status: \"pending\",\r\n//     });\r\n//     const navigate = useNavigate();\r\n//\r\n//\r\n//\r\n//\r\n//     function login(token) {\r\n//         localStorage.setItem('token', token);\r\n//         const decodedToken = jwtDecode(token);\r\n//         console.log(decodedToken)\r\n//         void fetchUserData(token, decodedToken.sub, \"/account\");\r\n//     }\r\n//\r\n//\r\n//     async function fetchUserData(token, sub, redirect) {\r\n//         try {\r\n//\r\n//             const response = await axios.get(`http://localhost:8083/users/${sub}`, {\r\n//                 headers: {\r\n//                     \"Content-Type\": \"application/json\",\r\n//                     Authorization: `Bearer ${token}`,\r\n//                 }\r\n//             })\r\n//\r\n//             console.log(response.data)\r\n//             setAuth({\r\n//                 ...auth,\r\n//                 isAuth: true,\r\n//                 user: {\r\n//                     username: response.data.username,\r\n//                     authority: response.data.authorities[0].authority\r\n//                 },\r\n//                 status: \"done\"\r\n//             });\r\n//             // refreshes other than account page, the page will refresh it\r\n//             if (redirect) {\r\n//                 navigate(redirect);\r\n//             }\r\n//         } catch (e) {\r\n//             console.error(e);\r\n//             setAuth({\r\n//                 ...auth,\r\n//                 status: \"done\",\r\n//             })\r\n//         }\r\n//     }\r\n//\r\n//     function logout() {\r\n//         setAuth( {isAuth: false, user: null,\r\n//             status: \"pending\",});\r\n//         localStorage.removeItem(\"token\");\r\n//         console.log(\"Gebruiker is uitgelogd!\");\r\n//         navigate ('/');\r\n//     }\r\n//\r\n//     const data = {\r\n//         login: login,\r\n//         logout: logout,\r\n//         isAuth: auth.isAuth,\r\n//         user: auth.user,\r\n//         status: auth.status,\r\n//     }\r\n//\r\n//     return (\r\n//         <AuthContext.Provider value={data}>\r\n//             {children}\r\n//         </AuthContext.Provider>\r\n//     );\r\n// }\r\n// export default AuthContextProvider;\r\n//\r\n//\r\n//\r\n//\r\n// // import {createContext, useEffect,  useState} from 'react';\r\n// // import {useNavigate} from 'react-router-dom';\r\n// //\r\n// // import axios from \"axios\";\r\n// // import jwtDecode from \"jwt-decode\";\r\n// //\r\n// //\r\n// // export const AuthContext = createContext({}) ;\r\n// //\r\n// // export function AuthContextProvider({children}) {\r\n// //\r\n// //     const navigate = useNavigate()\r\n// //\r\n// //     useEffect(() => {\r\n// //         //check of er een token is in localstorage\r\n// //         if(localStorage.getItem(\"token\")){\r\n// //             //get en decode token\r\n// //             const decoded = jwtDecode(localStorage.getItem(\"token\"))\r\n// //             //get token\r\n// //             const token = localStorage.getItem(\"token\")\r\n// //             //fetch data met decoded en normale token\r\n// //             void fetchUserData(decoded, token)\r\n// //             // console.log(\"er is een token\", token)\r\n// //         }else{\r\n// //             //als er geen token is update dan de isAuth\r\n// //             setIsAuth({isAuth: false,\r\n// //                 user:\"\",\r\n// //                 status: \"done\",\r\n// //             })\r\n// //             // console.log(\"er is geen token\")\r\n// //         }\r\n// //     }, []);\r\n// //\r\n// //\r\n// //\r\n// //     const [isAuth, setIsAuth] = useState({\r\n// //         isAuth: false, user: null,\r\n// //         status: \"pending\",\r\n// //     });\r\n// //\r\n// //\r\n// //\r\n// //\r\n// //\r\n// //     function login(token){\r\n// //         setIsAuth((isAuth) => ({\r\n// //             ...isAuth,\r\n// //             isAuth: true,\r\n// //             user: {...isAuth.user,token: token}\r\n// //         }));\r\n// //\r\n// //\r\n// //\r\n// //\r\n// //         localStorage.setItem('token', token);\r\n// //         const decodedToken = jwtDecode(token);\r\n// //         console.log(decodedToken)\r\n// //\r\n// //\r\n// //         void fetchUserData(token, decodedToken.sub, \"/account\");\r\n// //     }\r\n// //\r\n// //\r\n// //     async function fetchUserData(token, sub, redirect) {\r\n// //         try {\r\n// //\r\n// //             const response = await axios.get(`http://localhost:8083/users/${sub}`, {\r\n// //                 headers: {\r\n// //                     \"Content-Type\": \"application/json\",\r\n// //                     Authorization: `Bearer ${token}`,\r\n// //                 }\r\n// //             })\r\n// //\r\n// //             console.log(response.data)\r\n// //\r\n// //\r\n// //             setIsAuth({\r\n// //                 ...isAuth,\r\n// //                 isAuth: true,\r\n// //                 user: {\r\n// //                     username: response.data.username,\r\n// //                     // authority: response.data.authorities[0].authority\r\n// //                 },\r\n// //                 status: \"done\"\r\n// //             });\r\n// //\r\n// //\r\n// //             // refreshes other than account page, the page will refresh it\r\n// //             // if (redirect) {\r\n// //             //     navigate(redirect);\r\n// //             // }\r\n// //\r\n// //         } catch (e) {\r\n// //             console.error(e);\r\n// //             // setAuth({\r\n// //             //     ...auth,\r\n// //             //     status: \"done\",\r\n// //             // })\r\n// //         }\r\n// //     }\r\n// //\r\n// //     function logout() {\r\n// //         setIsAuth( {isAuth: false, user: \"\"});\r\n// //         localStorage.removeItem(\"token\");\r\n// //         console.log(\"Gebruiker is uitgelogd!\");\r\n// //         navigate ('/');\r\n// //         setIsAuth({\r\n// //             isAuth: false,\r\n// //             user: \"\",\r\n// //             status: \"done\",\r\n// //         })\r\n// //     }\r\n// //\r\n// //     const data = {\r\n// //\r\n// //         isAuth,\r\n// //\r\n// //         login: login,\r\n// //         logout: logout,\r\n// //         // isAuth: auth.isAuth,\r\n// //         // user: auth.user,\r\n// //         // status: auth.status,\r\n// //     }\r\n// //\r\n// //     return (\r\n// //         <AuthContext.Provider value={data}>\r\n// //             {children }\r\n// //         </AuthContext.Provider>\r\n// //     );\r\n// // }\r\n// // export default AuthContextProvider;\r\n// //\r\n// //\r\n// //\r\n// //\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//\r\n// // import {createContext, useEffect, useState} from 'react';\r\n// // import {useNavigate} from 'react-router-dom';\r\n// //\r\n// // import axios from \"axios\";\r\n// // import jwtDecode from \"jwt-decode\";\r\n// //\r\n// //\r\n// //\r\n// //\r\n// //\r\n// // export const AuthContext = createContext({}) ;\r\n// //\r\n// // function AuthContextProvider({children}) {\r\n// //\r\n// //\r\n// //     const [auth, setAuth] = useState({\r\n// //         isAuth: false,\r\n// //         user: null,\r\n// //         status: \"pending\",\r\n// //     });\r\n// //     const navigate = useNavigate();\r\n// //\r\n// //\r\n// //     useEffect(() => {\r\n// //         //check of er een token is in localstorage\r\n// //         if(localStorage.getItem(\"token\")){\r\n// //             //get en decode token\r\n// //             const decodedToken = jwtDecode(localStorage.getItem(\"token\"))\r\n// //             //get token\r\n// //             const token = localStorage.getItem(\"token\")\r\n// //             //fetch data met decoded en normale token\r\n// //             void fetchUserData(decodedToken, token)\r\n// //             // console.log(\"er is een token\", token)\r\n// //         }else{\r\n// //             //als er geen token is update dan de isAuth\r\n// //             setAuth({isAuth: false,\r\n// //                 user:\"\",\r\n// //                 status: \"done\",\r\n// //             })\r\n// //             // console.log(\"er is geen token\")\r\n// //         }\r\n// //     }, []);\r\n// //\r\n// //     // useEffect(() => {\r\n// //     //         const storedToken = localStorage.getItem(\"token\");\r\n// //     //         if (storedToken) {\r\n// //     //             // when token then fetchUserData\r\n// //     //             const decodedToken = jwtDecode(storedToken)\r\n// //     //             if (Math.floor(Date.now() / 1000) < decodedToken.exp) {\r\n// //     //                 void fetchUserData(storedToken, decodedToken.sub);\r\n// //     //             }\r\n// //     //         } else {\r\n// //     //             // when no token set status done and render app\r\n// //     //             setAuth({\r\n// //     //                 ...auth,\r\n// //     //                 isAuth: false,\r\n// //     //                 user: null,\r\n// //     //                 status: 'done',\r\n// //     //             });\r\n// //     //         }\r\n// //     //     }, []\r\n// //     // );\r\n// //\r\n// //\r\n// //     function login(token) {\r\n// //\r\n// //\r\n// //         localStorage.setItem('token', token);\r\n// //         const decodedToken = jwtDecode(token);\r\n// //         console.log(decodedToken)\r\n// //         void fetchUserData(token, decodedToken.sub, \"/account\");\r\n// //\r\n// //     }\r\n// //\r\n// //     async function fetchUserData(token, sub, redirect) {\r\n// //         try {\r\n// //\r\n// //             const response = await axios.get(`http://localhost:8083/users/${sub}`, {\r\n// //                 headers: {\r\n// //                     \"Content-Type\": \"application/json\",\r\n// //                     Authorization: `Bearer ${token}`,\r\n// //                 }\r\n// //             })\r\n// //\r\n// //             console.log(response.data)\r\n// //             setAuth({\r\n// //                 ...auth,\r\n// //                 isAuth: true,\r\n// //                 user: {\r\n// //                     username: response.data.username,\r\n// //                     authority: response.data.authorities[0].authority\r\n// //                 },\r\n// //                 status: \"pending\"\r\n// //             });\r\n// //             // refreshes other than account page, the page will refresh it\r\n// //             if (redirect) {\r\n// //                 navigate(redirect);\r\n// //             }\r\n// //         } catch (e) {\r\n// //             console.error(e);\r\n// //             setAuth({\r\n// //                 ...auth,\r\n// //                 status: \"done\",\r\n// //             })\r\n// //         }\r\n// //     }\r\n// //\r\n// //     function logout() {\r\n// //         setAuth( {isAuth: false, user: null,\r\n// //             status: \"done\",});\r\n// //         localStorage.removeItem(\"token\");\r\n// //         console.log(\"Gebruiker is uitgelogd!\");\r\n// //         navigate ('/');\r\n// //     }\r\n// //\r\n// //     const data = {\r\n// //         login: login,\r\n// //         logout: logout,\r\n// //         isAuth: auth.isAuth,\r\n// //         user: auth.user,\r\n// //         status: auth.status,\r\n// //     }\r\n// //\r\n// //     return (\r\n// //         <AuthContext.Provider value={data}>\r\n// //             {children}\r\n// //         </AuthContext.Provider>\r\n// //     );\r\n// // }\r\n// // export default AuthContextProvider;\r\n// //\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,OAAOA,KAAK,IAAGC,aAAa,EAAEC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAC/D,SAAQC,WAAW,QAAO,kBAAkB;AAC5C,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,OAAO,MAAMC,WAAW,gBAAGR,aAAa,CAAC,CAAC,CAAC,CAAC;AAE5C,SAASS,mBAAmBA,CAAAC,IAAA,EAAa;EAAAC,EAAA;EAAA,IAAZ;IAACC;EAAQ,CAAC,GAAAF,IAAA;EACnC,MAAM,CAACG,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC;IAC7Ba,MAAM,EAAE,KAAK;IACbC,IAAI,EAAE,IAAI;IACVC,MAAM,EAAE;EACZ,CAAC,CAAC;EACF,MAAMC,QAAQ,GAAGf,WAAW,CAAC,CAAC;EAG9BF,SAAS,CAAC,MAAM;IACR,MAAMkB,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACjD,IAAIF,WAAW,EAAE;MAEb,MAAMG,YAAY,GAAGlB,SAAS,CAACe,WAAW,CAAC;MAC3C,IAAII,IAAI,CAACC,KAAK,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAGJ,YAAY,CAACK,GAAG,EAAE;QAClD,KAAKC,aAAa,CAACT,WAAW,EAAEG,YAAY,CAACO,GAAG,CAAC;MACrD;IACJ,CAAC,MAAM;MAEHf,OAAO,CAAC;QACJ,GAAGD,IAAI;QACPE,MAAM,EAAE,KAAK;QACbC,IAAI,EAAE,IAAI;QACVC,MAAM,EAAE;MACZ,CAAC,CAAC;IACN;EACJ,CAAC,EAAE,EACP,CAAC;EAGD,SAASa,KAAKA,CAACC,KAAK,EAAE;IAClBX,YAAY,CAACY,OAAO,CAAC,OAAO,EAAED,KAAK,CAAC;IACpC,MAAMT,YAAY,GAAGlB,SAAS,CAAC2B,KAAK,CAAC;IACrC,KAAKH,aAAa,CAACG,KAAK,EAAET,YAAY,CAACO,GAAG,EAAE,UAAU,CAAC;EAC3D;EAGA,eAAeD,aAAaA,CAACG,KAAK,EAAEF,GAAG,EAAEI,QAAQ,EAAE;IAC/C,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAM7B,KAAK,CAAC8B,GAAG,CAAE,+BAA8BN,GAAI,EAAC,EAAE;QACnEO,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB;UAClCC,aAAa,EAAG,UAASN,KAAM;QACnC;MACJ,CAAC,CAAC;MACFjB,OAAO,CAAC;QACJ,GAAGD,IAAI;QACPE,MAAM,EAAE,IAAI;QACZC,IAAI,EAAE;UACFsB,QAAQ,EAAEJ,QAAQ,CAACK,IAAI,CAACD,QAAQ;UAChCE,SAAS,EAAEN,QAAQ,CAACK,IAAI,CAACE,WAAW,CAAC,CAAC,CAAC,CAACD;QAC5C,CAAC;QACDvB,MAAM,EAAE;MACZ,CAAC,CAAC;MAEF,IAAIgB,QAAQ,EAAE;QACVf,QAAQ,CAACe,QAAQ,CAAC;MACtB;IACJ,CAAC,CAAC,OAAOS,CAAC,EAAE;MACRC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;MAChB5B,OAAO,CAAC;QACJ,GAAGD,IAAI;QACPI,MAAM,EAAE;MACZ,CAAC,CAAC;IACN;EACJ;EAGA,SAAS4B,MAAMA,CAAA,EAAG;IACdzB,YAAY,CAAC0B,UAAU,CAAC,OAAO,CAAC;IAChC5B,QAAQ,CAAC,QAAQ,CAAC;IAClBJ,OAAO,CAAC;MACJ,GAAGD,IAAI;MACPE,MAAM,EAAE,KAAK;MACbC,IAAI,EAAE,IAAI;MACVC,MAAM,EAAE;IACZ,CAAC,CAAC;EACN;EAGA,MAAMsB,IAAI,GAAG;IACTxB,MAAM,EAAEF,IAAI,CAACE,MAAM;IACnBC,IAAI,EAAEH,IAAI,CAACG,IAAI;IACfC,MAAM,EAAEJ,IAAI,CAACI,MAAM;IACnBa,KAAK,EAAEA,KAAK;IACZe,MAAM,EAAEA;EACZ,CAAC;EAGD,oBACItC,OAAA,CAACC,WAAW,CAACuC,QAAQ;IAACC,KAAK,EAAET,IAAK;IAAA3B,QAAA,EAC7BC,IAAI,CAACI,MAAM,KAAK,MAAM,GAAGL,QAAQ,gBAAGL,OAAA;MAAAK,QAAA,EAAG;IAAU;MAAAqC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpC,CAAC;AAE/B;AAACzC,EAAA,CA9FQF,mBAAmB;EAAA,QAMPN,WAAW;AAAA;AAAAkD,EAAA,GANvB5C,mBAAmB;AAiG5B,eAAeA,mBAAmB;;AAmBl},"metadata":{},"sourceType":"module","externalDependencies":[]}