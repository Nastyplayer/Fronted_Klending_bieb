{"ast":null,"code":"\n\n// import {createContext, useEffect, useState} from 'react';\n// import {useNavigate} from 'react-router-dom';\n//\n// import axios from \"axios\";\n// import jwtDecode from \"jwt-decode\";\n//\n//\n//\n//\n//\n// export const AuthContext = createContext({}) ;\n//\n// function AuthContextProvider({children}) {\n//\n//\n//     const [auth, setAuth] = useState({\n//         isAuth: false,\n//         user: null,\n//         status: \"pending\",\n//     });\n//     const navigate = useNavigate();\n//\n//\n//     useEffect(() => {\n//         //check of er een token is in localstorage\n//         if(localStorage.getItem(\"token\")){\n//             //get en decode token\n//             const decodedToken = jwtDecode(localStorage.getItem(\"token\"))\n//             //get token\n//             const token = localStorage.getItem(\"token\")\n//             //fetch data met decoded en normale token\n//             void fetchUserData(decodedToken, token)\n//             // console.log(\"er is een token\", token)\n//         }else{\n//             //als er geen token is update dan de isAuth\n//             setAuth({isAuth: false,\n//                 user:\"\",\n//                 status: \"done\",\n//             })\n//             // console.log(\"er is geen token\")\n//         }\n//     }, []);\n//\n//     // useEffect(() => {\n//     //         const storedToken = localStorage.getItem(\"token\");\n//     //         if (storedToken) {\n//     //             // when token then fetchUserData\n//     //             const decodedToken = jwtDecode(storedToken)\n//     //             if (Math.floor(Date.now() / 1000) < decodedToken.exp) {\n//     //                 void fetchUserData(storedToken, decodedToken.sub);\n//     //             }\n//     //         } else {\n//     //             // when no token set status done and render app\n//     //             setAuth({\n//     //                 ...auth,\n//     //                 isAuth: false,\n//     //                 user: null,\n//     //                 status: 'done',\n//     //             });\n//     //         }\n//     //     }, []\n//     // );\n//\n//\n//     function login(token) {\n//\n//\n//         localStorage.setItem('token', token);\n//         const decodedToken = jwtDecode(token);\n//         console.log(decodedToken)\n//         void fetchUserData(token, decodedToken.sub, \"/account\");\n//\n//     }\n//\n//     async function fetchUserData(token, sub, redirect) {\n//         try {\n//\n//             const response = await axios.get(`http://localhost:8083/users/${sub}`, {\n//                 headers: {\n//                     \"Content-Type\": \"application/json\",\n//                     Authorization: `Bearer ${token}`,\n//                 }\n//             })\n//\n//             console.log(response.data)\n//             setAuth({\n//                 ...auth,\n//                 isAuth: true,\n//                 user: {\n//                     username: response.data.username,\n//                     authority: response.data.authorities[0].authority\n//                 },\n//                 status: \"pending\"\n//             });\n//             // refreshes other than account page, the page will refresh it\n//             if (redirect) {\n//                 navigate(redirect);\n//             }\n//         } catch (e) {\n//             console.error(e);\n//             setAuth({\n//                 ...auth,\n//                 status: \"done\",\n//             })\n//         }\n//     }\n//\n//     function logout() {\n//         setAuth( {isAuth: false, user: null,\n//             status: \"done\",});\n//         localStorage.removeItem(\"token\");\n//         console.log(\"Gebruiker is uitgelogd!\");\n//         navigate ('/');\n//     }\n//\n//     const data = {\n//         login: login,\n//         logout: logout,\n//         isAuth: auth.isAuth,\n//         user: auth.user,\n//         status: auth.status,\n//     }\n//\n//     return (\n//         <AuthContext.Provider value={data}>\n//             {children}\n//         </AuthContext.Provider>\n//     );\n// }\n// export default AuthContextProvider;\n//","map":{"version":3,"names":[],"sources":["C:/Users/jftal/WebstormProjects/Fronted_Klending_bieb1/src/context/AuthContext.js"],"sourcesContent":["\r\n\r\n\r\n\r\n\r\n\r\n// import {createContext, useEffect, useState} from 'react';\r\n// import {useNavigate} from 'react-router-dom';\r\n//\r\n// import axios from \"axios\";\r\n// import jwtDecode from \"jwt-decode\";\r\n//\r\n//\r\n//\r\n//\r\n//\r\n// export const AuthContext = createContext({}) ;\r\n//\r\n// function AuthContextProvider({children}) {\r\n//\r\n//\r\n//     const [auth, setAuth] = useState({\r\n//         isAuth: false,\r\n//         user: null,\r\n//         status: \"pending\",\r\n//     });\r\n//     const navigate = useNavigate();\r\n//\r\n//\r\n//     useEffect(() => {\r\n//         //check of er een token is in localstorage\r\n//         if(localStorage.getItem(\"token\")){\r\n//             //get en decode token\r\n//             const decodedToken = jwtDecode(localStorage.getItem(\"token\"))\r\n//             //get token\r\n//             const token = localStorage.getItem(\"token\")\r\n//             //fetch data met decoded en normale token\r\n//             void fetchUserData(decodedToken, token)\r\n//             // console.log(\"er is een token\", token)\r\n//         }else{\r\n//             //als er geen token is update dan de isAuth\r\n//             setAuth({isAuth: false,\r\n//                 user:\"\",\r\n//                 status: \"done\",\r\n//             })\r\n//             // console.log(\"er is geen token\")\r\n//         }\r\n//     }, []);\r\n//\r\n//     // useEffect(() => {\r\n//     //         const storedToken = localStorage.getItem(\"token\");\r\n//     //         if (storedToken) {\r\n//     //             // when token then fetchUserData\r\n//     //             const decodedToken = jwtDecode(storedToken)\r\n//     //             if (Math.floor(Date.now() / 1000) < decodedToken.exp) {\r\n//     //                 void fetchUserData(storedToken, decodedToken.sub);\r\n//     //             }\r\n//     //         } else {\r\n//     //             // when no token set status done and render app\r\n//     //             setAuth({\r\n//     //                 ...auth,\r\n//     //                 isAuth: false,\r\n//     //                 user: null,\r\n//     //                 status: 'done',\r\n//     //             });\r\n//     //         }\r\n//     //     }, []\r\n//     // );\r\n//\r\n//\r\n//     function login(token) {\r\n//\r\n//\r\n//         localStorage.setItem('token', token);\r\n//         const decodedToken = jwtDecode(token);\r\n//         console.log(decodedToken)\r\n//         void fetchUserData(token, decodedToken.sub, \"/account\");\r\n//\r\n//     }\r\n//\r\n//     async function fetchUserData(token, sub, redirect) {\r\n//         try {\r\n//\r\n//             const response = await axios.get(`http://localhost:8083/users/${sub}`, {\r\n//                 headers: {\r\n//                     \"Content-Type\": \"application/json\",\r\n//                     Authorization: `Bearer ${token}`,\r\n//                 }\r\n//             })\r\n//\r\n//             console.log(response.data)\r\n//             setAuth({\r\n//                 ...auth,\r\n//                 isAuth: true,\r\n//                 user: {\r\n//                     username: response.data.username,\r\n//                     authority: response.data.authorities[0].authority\r\n//                 },\r\n//                 status: \"pending\"\r\n//             });\r\n//             // refreshes other than account page, the page will refresh it\r\n//             if (redirect) {\r\n//                 navigate(redirect);\r\n//             }\r\n//         } catch (e) {\r\n//             console.error(e);\r\n//             setAuth({\r\n//                 ...auth,\r\n//                 status: \"done\",\r\n//             })\r\n//         }\r\n//     }\r\n//\r\n//     function logout() {\r\n//         setAuth( {isAuth: false, user: null,\r\n//             status: \"done\",});\r\n//         localStorage.removeItem(\"token\");\r\n//         console.log(\"Gebruiker is uitgelogd!\");\r\n//         navigate ('/');\r\n//     }\r\n//\r\n//     const data = {\r\n//         login: login,\r\n//         logout: logout,\r\n//         isAuth: auth.isAuth,\r\n//         user: auth.user,\r\n//         status: auth.status,\r\n//     }\r\n//\r\n//     return (\r\n//         <AuthContext.Provider value={data}>\r\n//             {children}\r\n//         </AuthContext.Provider>\r\n//     );\r\n// }\r\n// export default AuthContextProvider;\r\n//\r\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}